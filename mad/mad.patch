diff -ru libmad-0.15.1b/fixed.h libmad-src/fixed.h
--- libmad-0.15.1b/fixed.h	2004-02-16 18:02:03.000000000 -0800
+++ libmad-src/fixed.h	2011-01-09 16:39:09.000000000 -0800
@@ -22,6 +22,12 @@
 # ifndef LIBMAD_FIXED_H
 # define LIBMAD_FIXED_H

+#if __BIG_ENDIAN__
+# define FPM_PPC
+#else
+# define FPM_INTEL
+#endif
+
 # if SIZEOF_INT >= 4
 typedef   signed int mad_fixed_t;

@@ -167,7 +173,7 @@
  * significant bit depends on OPT_ACCURACY via mad_f_scale64().
  */
 #   define MAD_F_MLX(hi, lo, x, y)  \
-    asm ("imull %3"  \
+    __asm ("imull %3"  \
 	 : "=a" (lo), "=d" (hi)  \
 	 : "%a" (x), "rm" (y)  \
 	 : "cc")
@@ -180,7 +186,7 @@
     ({ mad_fixed64hi_t __hi;  \
        mad_fixed64lo_t __lo;  \
        MAD_F_MLX(__hi, __lo, (x), (y));  \
-       asm ("addl %2,%0\n\t"  \
+       __asm ("addl %2,%0\n\t"  \
 	    "adcl %3,%1"  \
 	    : "=rm" (lo), "=rm" (hi)  \
 	    : "r" (__lo), "r" (__hi), "0" (lo), "1" (hi)  \
@@ -196,13 +202,13 @@
     ({ mad_fixed64hi_t __hi_;  \
        mad_fixed64lo_t __lo_;  \
        mad_fixed_t __result;  \
-       asm ("addl %4,%2\n\t"  \
+       __asm ("addl %4,%2\n\t"  \
 	    "adcl %5,%3"  \
 	    : "=rm" (__lo_), "=rm" (__hi_)  \
 	    : "0" (lo), "1" (hi),  \
 	      "ir" (1L << (MAD_F_SCALEBITS - 1)), "ir" (0)  \
 	    : "cc");  \
-       asm ("shrdl %3,%2,%1"  \
+       __asm ("shrdl %3,%2,%1"  \
 	    : "=rm" (__result)  \
 	    : "0" (__lo_), "r" (__hi_), "I" (MAD_F_SCALEBITS)  \
 	    : "cc");  \
@@ -214,7 +220,7 @@
  */
 #    define mad_f_scale64(hi, lo)  \
     ({ mad_fixed_t __result;  \
-       asm ("shrl %3,%1\n\t"  \
+       __asm ("shrl %3,%1\n\t"  \
 	    "shll %4,%2\n\t"  \
 	    "orl %2,%1"  \
 	    : "=rm" (__result)  \
@@ -226,7 +232,7 @@
 #   else
 #    define mad_f_scale64(hi, lo)  \
     ({ mad_fixed_t __result;  \
-       asm ("shrdl %3,%2,%1"  \
+       __asm ("shrdl %3,%2,%1"  \
 	    : "=rm" (__result)  \
 	    : "0" (lo), "r" (hi), "I" (MAD_F_SCALEBITS)  \
 	    : "cc");  \
@@ -254,7 +260,7 @@
     ({ mad_fixed64hi_t __hi;  \
        mad_fixed64lo_t __lo;  \
        mad_fixed_t __result;  \
-       asm ("smull	%0, %1, %3, %4\n\t"  \
+       __asm ("smull	%0, %1, %3, %4\n\t"  \
 	    "movs	%0, %0, lsr %5\n\t"  \
 	    "adc	%2, %0, %1, lsl %6"  \
 	    : "=&r" (__lo), "=&r" (__hi), "=r" (__result)  \
@@ -266,17 +272,17 @@
 # endif

 #  define MAD_F_MLX(hi, lo, x, y)  \
-    asm ("smull	%0, %1, %2, %3"  \
+    __asm ("smull	%0, %1, %2, %3"  \
 	 : "=&r" (lo), "=&r" (hi)  \
 	 : "%r" (x), "r" (y))

 #  define MAD_F_MLA(hi, lo, x, y)  \
-    asm ("smlal	%0, %1, %2, %3"  \
+    __asm ("smlal	%0, %1, %2, %3"  \
 	 : "+r" (lo), "+r" (hi)  \
 	 : "%r" (x), "r" (y))

 #  define MAD_F_MLN(hi, lo)  \
-    asm ("rsbs	%0, %2, #0\n\t"  \
+    __asm ("rsbs	%0, %2, #0\n\t"  \
 	 "rsc	%1, %3, #0"  \
 	 : "=r" (lo), "=r" (hi)  \
 	 : "0" (lo), "1" (hi)  \
@@ -284,7 +290,7 @@

 #  define mad_f_scale64(hi, lo)  \
     ({ mad_fixed_t __result;  \
-       asm ("movs	%0, %1, lsr %3\n\t"  \
+       __asm ("movs	%0, %1, lsr %3\n\t"  \
 	    "adc	%0, %0, %2, lsl %4"  \
 	    : "=&r" (__result)  \
 	    : "r" (lo), "r" (hi),  \
@@ -304,13 +310,13 @@
  * significant bit depends on OPT_ACCURACY via mad_f_scale64().
  */
 #  define MAD_F_MLX(hi, lo, x, y)  \
-    asm ("mult	%2,%3"  \
+    __asm ("mult	%2,%3"  \
 	 : "=l" (lo), "=h" (hi)  \
 	 : "%r" (x), "r" (y))

 # if defined(HAVE_MADD_ASM)
 #  define MAD_F_MLA(hi, lo, x, y)  \
-    asm ("madd	%2,%3"  \
+    __asm ("madd	%2,%3"  \
 	 : "+l" (lo), "+h" (hi)  \
 	 : "%r" (x), "r" (y))
 # elif defined(HAVE_MADD16_ASM)
@@ -319,11 +325,11 @@
  * multiply/accumulate instruction.
  */
 #  define MAD_F_ML0(hi, lo, x, y)  \
-    asm ("mult	%2,%3"  \
+    __asm ("mult	%2,%3"  \
 	 : "=l" (lo), "=h" (hi)  \
 	 : "%r" ((x) >> 12), "r" ((y) >> 16))
 #  define MAD_F_MLA(hi, lo, x, y)  \
-    asm ("madd16	%2,%3"  \
+    __asm ("madd16	%2,%3"  \
 	 : "+l" (lo), "+h" (hi)  \
 	 : "%r" ((x) >> 12), "r" ((y) >> 16))
 #  define MAD_F_MLZ(hi, lo)  ((mad_fixed_t) (lo))
@@ -344,7 +350,7 @@
  * significant bit depends on OPT_ACCURACY via mad_f_scale64().
  */
 #  define MAD_F_MLX(hi, lo, x, y)  \
-    asm ("smul %2, %3, %0\n\t"  \
+    __asm ("smul %2, %3, %0\n\t"  \
 	 "rd %%y, %1"  \
 	 : "=r" (lo), "=r" (hi)  \
 	 : "%r" (x), "rI" (y))
@@ -359,10 +365,10 @@
  */
 #  define MAD_F_MLX(hi, lo, x, y)  \
     do {  \
-      asm ("mullw %0,%1,%2"  \
+      __asm ("mullw %0,%1,%2"  \
 	   : "=r" (lo)  \
 	   : "%r" (x), "r" (y));  \
-      asm ("mulhw %0,%1,%2"  \
+      __asm ("mulhw %0,%1,%2"  \
 	   : "=r" (hi)  \
 	   : "%r" (x), "r" (y));  \
     }  \
@@ -376,7 +382,7 @@
     ({ mad_fixed64hi_t __hi;  \
        mad_fixed64lo_t __lo;  \
        MAD_F_MLX(__hi, __lo, (x), (y));  \
-       asm ("addc %0,%2,%3\n\t"  \
+       __asm ("addc %0,%2,%3\n\t"  \
 	    "adde %1,%4,%5"  \
 	    : "=r" (lo), "=r" (hi)  \
 	    : "%r" (lo), "r" (__lo),  \
@@ -391,16 +397,16 @@
  */
 #   define mad_f_scale64(hi, lo)  \
     ({ mad_fixed_t __result, __round;  \
-       asm ("rotrwi %0,%1,%2"  \
+       __asm ("rotrwi %0,%1,%2"  \
 	    : "=r" (__result)  \
 	    : "r" (lo), "i" (MAD_F_SCALEBITS));  \
-       asm ("extrwi %0,%1,1,0"  \
+       __asm ("extrwi %0,%1,1,0"  \
 	    : "=r" (__round)  \
 	    : "r" (__result));  \
-       asm ("insrwi %0,%1,%2,0"  \
+       __asm ("insrwi %0,%1,%2,0"  \
 	    : "+r" (__result)  \
 	    : "r" (hi), "i" (MAD_F_SCALEBITS));  \
-       asm ("add %0,%1,%2"  \
+       __asm ("add %0,%1,%2"  \
 	    : "=r" (__result)  \
 	    : "%r" (__result), "r" (__round));  \
        __result;  \
@@ -408,10 +414,10 @@
 #  else
 #   define mad_f_scale64(hi, lo)  \
     ({ mad_fixed_t __result;  \
-       asm ("rotrwi %0,%1,%2"  \
+       __asm ("rotrwi %0,%1,%2"  \
 	    : "=r" (__result)  \
 	    : "r" (lo), "i" (MAD_F_SCALEBITS));  \
-       asm ("insrwi %0,%1,%2,0"  \
+       __asm ("insrwi %0,%1,%2,0"  \
 	    : "+r" (__result)  \
 	    : "r" (hi), "i" (MAD_F_SCALEBITS));  \
        __result;  \
diff -ru libmad-0.15.1b/mad.h libmad-src/mad.h
--- libmad-0.15.1b/mad.h	2004-02-16 18:55:44.000000000 -0800
+++ libmad-src/mad.h	2011-01-09 16:34:53.000000000 -0800
@@ -24,12 +24,20 @@
 extern "C" {
 # endif

+#if __BIG_ENDIAN__
+# define FPM_PPC
+#else
 # define FPM_INTEL
+#endif



 # define SIZEOF_INT 4
+#if __LP64__
+# define SIZEOF_LONG 8
+#else
 # define SIZEOF_LONG 4
+#endif
 # define SIZEOF_LONG_LONG 8


